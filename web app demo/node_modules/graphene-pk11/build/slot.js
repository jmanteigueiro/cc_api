"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core = require("./core");
var token = require("./token");
var mech = require("./mech");
var session = require("./session");
var SlotFlag;
(function (SlotFlag) {
    SlotFlag[SlotFlag["TOKEN_PRESENT"] = 1] = "TOKEN_PRESENT";
    SlotFlag[SlotFlag["REMOVABLE_DEVICE"] = 2] = "REMOVABLE_DEVICE";
    SlotFlag[SlotFlag["HW_SLOT"] = 4] = "HW_SLOT";
})(SlotFlag = exports.SlotFlag || (exports.SlotFlag = {}));
var Slot = (function (_super) {
    tslib_1.__extends(Slot, _super);
    function Slot(handle, module, lib) {
        var _this = _super.call(this, handle, lib) || this;
        _this.module = module;
        _this.getInfo();
        return _this;
    }
    Slot.prototype.getInfo = function () {
        var info = this.lib.C_GetSlotInfo(this.handle);
        this.slotDescription = core.removePadding(info.slotDescription);
        this.manufacturerID = core.removePadding(info.manufacturerID);
        this.flags = info.flags;
        this.hardwareVersion = info.hardwareVersion;
        this.firmwareVersion = info.firmwareVersion;
    };
    Slot.prototype.getToken = function () {
        return new token.Token(this.handle, this.lib);
    };
    Slot.prototype.getMechanisms = function () {
        var arr = this.lib.C_GetMechanismList(this.handle);
        return new mech.MechanismCollection(arr, this.handle, this.lib);
    };
    Slot.prototype.initToken = function (pin) {
        return this.lib.C_InitToken(this.handle, pin);
    };
    Slot.prototype.open = function (flags) {
        if (flags === void 0) { flags = session.SessionFlag.SERIAL_SESSION; }
        var hSession = this.lib.C_OpenSession(this.handle, flags);
        return new session.Session(hSession, this, this.lib);
    };
    Slot.prototype.closeAll = function () {
        this.lib.C_CloseAllSessions(this.handle);
    };
    return Slot;
}(core.HandleObject));
exports.Slot = Slot;
var SlotCollection = (function (_super) {
    tslib_1.__extends(SlotCollection, _super);
    function SlotCollection(items, module, lib, classType) {
        if (classType === void 0) { classType = Slot; }
        var _this = _super.call(this, items, lib, classType) || this;
        _this.module = module;
        return _this;
    }
    SlotCollection.prototype.items = function (index) {
        return new Slot(this.items_[index], this.module, this.lib);
    };
    return SlotCollection;
}(core.Collection));
exports.SlotCollection = SlotCollection;

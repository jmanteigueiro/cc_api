"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core = require("../core");
var mech_1 = require("../mech");
var INVALID = 192;
var Verify = (function (_super) {
    tslib_1.__extends(Verify, _super);
    function Verify(session, alg, key, lib) {
        var _this = _super.call(this, lib) || this;
        _this.session = session;
        _this.init(alg, key);
        return _this;
    }
    Verify.prototype.init = function (alg, key) {
        var pMech = mech_1.Mechanism.create(alg);
        this.lib.C_VerifyInit(this.session.handle, pMech, key.handle);
    };
    Verify.prototype.update = function (data) {
        try {
            var _data = new Buffer(data);
            this.lib.C_VerifyUpdate(this.session.handle, _data);
        }
        catch (e) {
            try {
                this.final(new Buffer(0));
            }
            catch (e) { }
            throw e;
        }
    };
    Verify.prototype.final = function (signature) {
        var res = false;
        try {
            res = this.lib.C_VerifyFinal(this.session.handle, signature);
        }
        catch (err) {
            if (core.getPKCS11ErrorCode(err) !== INVALID) {
                throw err;
            }
        }
        return res;
    };
    Verify.prototype.once = function (data, signature, cb) {
        var _data = new Buffer(data);
        if (cb) {
            this.lib.C_Verify(this.session.handle, _data, signature, function (err, data) {
                if (err && core.getPKCS11ErrorCode(err) === INVALID) {
                    cb(null, false);
                }
                else {
                    cb(err, data);
                }
            });
        }
        else {
            var res = false;
            try {
                res = this.lib.C_Verify(this.session.handle, _data, signature);
            }
            catch (err) {
                if (core.getPKCS11ErrorCode(err) !== INVALID) {
                    throw err;
                }
            }
            return res;
        }
    };
    return Verify;
}(core.BaseObject));
exports.Verify = Verify;

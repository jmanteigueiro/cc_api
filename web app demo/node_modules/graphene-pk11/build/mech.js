"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pkcs11 = require("pkcs11js");
var core = require("./core");
var fs = require("fs");
var mech_enum_1 = require("./mech_enum");
tslib_1.__exportStar(require("./mech_enum"), exports);
var MechanismFlag;
(function (MechanismFlag) {
    MechanismFlag[MechanismFlag["HW"] = pkcs11.CKF_HW] = "HW";
    MechanismFlag[MechanismFlag["ENCRYPT"] = pkcs11.CKF_ENCRYPT] = "ENCRYPT";
    MechanismFlag[MechanismFlag["DECRYPT"] = pkcs11.CKF_DECRYPT] = "DECRYPT";
    MechanismFlag[MechanismFlag["DIGEST"] = pkcs11.CKF_DIGEST] = "DIGEST";
    MechanismFlag[MechanismFlag["SIGN"] = pkcs11.CKF_SIGN] = "SIGN";
    MechanismFlag[MechanismFlag["SIGN_RECOVER"] = pkcs11.CKF_SIGN_RECOVER] = "SIGN_RECOVER";
    MechanismFlag[MechanismFlag["VERIFY"] = pkcs11.CKF_VERIFY] = "VERIFY";
    MechanismFlag[MechanismFlag["VERIFY_RECOVER"] = pkcs11.CKF_VERIFY_RECOVER] = "VERIFY_RECOVER";
    MechanismFlag[MechanismFlag["GENERATE"] = pkcs11.CKF_GENERATE] = "GENERATE";
    MechanismFlag[MechanismFlag["GENERATE_KEY_PAIR"] = pkcs11.CKF_GENERATE_KEY_PAIR] = "GENERATE_KEY_PAIR";
    MechanismFlag[MechanismFlag["WRAP"] = pkcs11.CKF_WRAP] = "WRAP";
    MechanismFlag[MechanismFlag["UNWRAP"] = pkcs11.CKF_UNWRAP] = "UNWRAP";
    MechanismFlag[MechanismFlag["DERIVE"] = pkcs11.CKF_DERIVE] = "DERIVE";
})(MechanismFlag = exports.MechanismFlag || (exports.MechanismFlag = {}));
var Mechanism = (function (_super) {
    tslib_1.__extends(Mechanism, _super);
    function Mechanism(handle, slotHandle, lib) {
        var _this = _super.call(this, lib) || this;
        _this.handle = handle;
        _this.slotHandle = slotHandle;
        _this.getInfo();
        return _this;
    }
    Object.defineProperty(Mechanism.prototype, "name", {
        get: function () {
            return mech_enum_1.MechanismEnum[this.handle] || "unknown";
        },
        enumerable: true,
        configurable: true
    });
    Mechanism.prototype.getInfo = function () {
        var info = this.lib.C_GetMechanismInfo(this.slotHandle, this.handle);
        this.minKeySize = info.minKeySize;
        this.maxKeySize = info.maxKeySize;
        this.flags = info.flags;
    };
    Mechanism.create = function (alg) {
        var res;
        var _alg;
        if (core.isString(alg)) {
            _alg = { name: alg, params: null };
        }
        else if (core.isNumber(alg)) {
            _alg = { name: mech_enum_1.MechanismEnum[alg], params: null };
        }
        else {
            _alg = alg;
        }
        var hAlg = mech_enum_1.MechanismEnum[_alg.name.toUpperCase()];
        if (core.isEmpty(hAlg))
            throw new TypeError("Unknown mechanism name '" + _alg.name + "'");
        var params = null;
        if (_alg.params) {
            if (_alg.params.toCKI)
                params = _alg.params.toCKI();
            else
                params = _alg.params;
        }
        res = {
            mechanism: hAlg,
            parameter: params
        };
        return res;
    };
    Mechanism.vendor = function (name, value) {
        var mechs = mech_enum_1.MechanismEnum;
        if (core.isEmpty(value)) {
            var file = fs.readFileSync(name);
            var vendor = JSON.parse(file.toString());
            for (var i in vendor) {
                var new_name = i;
                var v = vendor[i];
                mechs[new_name] = v;
                mechs[v] = new_name;
            }
        }
        else {
            var new_name = name;
            mechs[new_name] = value;
            mechs[value] = new_name;
        }
    };
    return Mechanism;
}(core.BaseObject));
exports.Mechanism = Mechanism;
var MechanismCollection = (function (_super) {
    tslib_1.__extends(MechanismCollection, _super);
    function MechanismCollection(items, slotHandle, lib, classType) {
        if (classType === void 0) { classType = Mechanism; }
        var _this = _super.call(this, items, lib, classType) || this;
        _this.slotHandle = slotHandle;
        return _this;
    }
    MechanismCollection.prototype.items = function (index) {
        var handle = this.items_[index];
        return new Mechanism(handle, this.slotHandle, this.lib);
    };
    return MechanismCollection;
}(core.Collection));
exports.MechanismCollection = MechanismCollection;
